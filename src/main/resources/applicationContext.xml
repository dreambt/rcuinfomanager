<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

    <context:property-placeholder location="classpath*:conf/RCUInfoManagerConf.properties"/>

    <context:component-scan base-package="com.rcuinfomanager"/>

    <bean id="dataSource"
          class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close"
          p:driverClassName="${jdbc.driverClassName}"
          p:url="${jdbc.url}"
          p:username="${jdbc.username}"
          p:password="${jdbc.password}"
          p:initialSize="10"
          p:maxActive="200"
          p:minIdle="10"
          p:maxIdle="200"
          p:maxWait="60000"
          p:minEvictableIdleTimeMillis="3600000"
          p:removeAbandoned="true"
          p:removeAbandonedTimeout="300"
          p:testOnBorrow="true"
          p:testOnReturn="false"
          p:testWhileIdle="true"
          p:validationQuery="select 1"
          p:validationQueryTimeout="2"
          p:timeBetweenEvictionRunsMillis="60000"
          p:numTestsPerEvictionRun="200"/>


    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.rcuinfomanager.dao" />
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transactionManager"></property>
        <property name="transactionAttributes">
            <props>
                <!--
                PROPAGATION_SUPPORTS    :  如果已经存在事务,则加入事务;如果没有事务,则以非事务的方式执行;
                PROPAGATION_MANDATORY   :  使用当前事务, 如果没有, 则抛出异常;
                PROPAGATION_REQUIRED    :  新建事务,如果当前有事务, 则挂起; P
                ROPAGATION_NOT_SUPPORTED:  以非事务的方式执行, 如果当前有事务, 则挂起;
                PROPAGATION_NEVER       :  以非事务的方式执行, 如果当前有事务,则抛出异常;+/-Exception</prop> + 表示异常出现时事物提交 - 表示异常出现时事务回滚
                -->
                <prop key="find*">PROPAGATION_SUPPORTS,readOnly</prop>
                <prop key="get*">PROPAGATION_SUPPORTS,readOnly</prop>
                <prop key="delete*"> PROPAGATION_SUPPORTS</prop>
                <prop key="update*">PROPAGATION_REQUIRED</prop>
                <prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
            </props>
        </property>
    </bean>
    <!-- 用来定义那些类需要采用事物管理 spring 事物的动态代理类 BeanNameAutoProxyCreator 根据类名自动代理，接受表达式 -->
    <bean id="beanProxy" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <!-- 对类名以MybatisService结尾的类进行代理 -->
            <value>*Service</value>
        </property>
        <!-- 对代理类进行加载拦截器(实现通知的过程) -->
        <property name="interceptorNames">
            <list>
                <value>transactionInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="bootstrap" class="com.rcuinfomanager.bootstrap.Bootstrap"/>



</beans>